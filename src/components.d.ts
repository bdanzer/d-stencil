/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface DButton {
    'secondary': boolean;
  }
  interface DContent {}
  interface DParallax {
    'imgSrc': string;
  }
  interface DSection {
    'transparent': boolean;
  }
  interface DanzerpressMenu {
    'isTransparent': boolean;
    'logoLink': string;
  }
  interface DanzerpressPostGrid {}
  interface DpSlider {
    'autoPlay': boolean;
    'autoPlayTimer': number;
    'childsClassName': string;
    'dir': string;
    'goToNext': (e?: any) => Promise<void>;
    'goToPrevious': (e?: any) => Promise<void>;
    'infinite': boolean;
    'itemsPerSlide': number;
    'setPan': (enabled: boolean) => Promise<void>;
    'showButtons': boolean;
    'showPointers': boolean;
    'showThumbnails': boolean;
    'slideTo': (n: number) => Promise<void>;
    'threshold': number;
    'timing': number;
  }
  interface MyComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
}

declare global {


  interface HTMLDButtonElement extends Components.DButton, HTMLStencilElement {}
  var HTMLDButtonElement: {
    prototype: HTMLDButtonElement;
    new (): HTMLDButtonElement;
  };

  interface HTMLDContentElement extends Components.DContent, HTMLStencilElement {}
  var HTMLDContentElement: {
    prototype: HTMLDContentElement;
    new (): HTMLDContentElement;
  };

  interface HTMLDParallaxElement extends Components.DParallax, HTMLStencilElement {}
  var HTMLDParallaxElement: {
    prototype: HTMLDParallaxElement;
    new (): HTMLDParallaxElement;
  };

  interface HTMLDSectionElement extends Components.DSection, HTMLStencilElement {}
  var HTMLDSectionElement: {
    prototype: HTMLDSectionElement;
    new (): HTMLDSectionElement;
  };

  interface HTMLDanzerpressMenuElement extends Components.DanzerpressMenu, HTMLStencilElement {}
  var HTMLDanzerpressMenuElement: {
    prototype: HTMLDanzerpressMenuElement;
    new (): HTMLDanzerpressMenuElement;
  };

  interface HTMLDanzerpressPostGridElement extends Components.DanzerpressPostGrid, HTMLStencilElement {}
  var HTMLDanzerpressPostGridElement: {
    prototype: HTMLDanzerpressPostGridElement;
    new (): HTMLDanzerpressPostGridElement;
  };

  interface HTMLDpSliderElement extends Components.DpSlider, HTMLStencilElement {}
  var HTMLDpSliderElement: {
    prototype: HTMLDpSliderElement;
    new (): HTMLDpSliderElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLElementTagNameMap {
    'd-button': HTMLDButtonElement;
    'd-content': HTMLDContentElement;
    'd-parallax': HTMLDParallaxElement;
    'd-section': HTMLDSectionElement;
    'danzerpress-menu': HTMLDanzerpressMenuElement;
    'danzerpress-post-grid': HTMLDanzerpressPostGridElement;
    'dp-slider': HTMLDpSliderElement;
    'my-component': HTMLMyComponentElement;
  }
}

declare namespace LocalJSX {
  interface DButton extends JSXBase.HTMLAttributes<HTMLDButtonElement> {
    'secondary'?: boolean;
  }
  interface DContent extends JSXBase.HTMLAttributes<HTMLDContentElement> {}
  interface DParallax extends JSXBase.HTMLAttributes<HTMLDParallaxElement> {
    'imgSrc'?: string;
  }
  interface DSection extends JSXBase.HTMLAttributes<HTMLDSectionElement> {
    'transparent'?: boolean;
  }
  interface DanzerpressMenu extends JSXBase.HTMLAttributes<HTMLDanzerpressMenuElement> {
    'isTransparent'?: boolean;
    'logoLink'?: string;
  }
  interface DanzerpressPostGrid extends JSXBase.HTMLAttributes<HTMLDanzerpressPostGridElement> {}
  interface DpSlider extends JSXBase.HTMLAttributes<HTMLDpSliderElement> {
    'autoPlay'?: boolean;
    'autoPlayTimer'?: number;
    'childsClassName'?: string;
    'dir'?: string;
    'infinite'?: boolean;
    'itemsPerSlide'?: number;
    'onAfterSlimInit'?: (event: CustomEvent<any>) => void;
    'onAfterSlimSlide'?: (event: CustomEvent<any>) => void;
    'showButtons'?: boolean;
    'showPointers'?: boolean;
    'showThumbnails'?: boolean;
    'threshold'?: number;
    'timing'?: number;
  }
  interface MyComponent extends JSXBase.HTMLAttributes<HTMLMyComponentElement> {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }

  interface IntrinsicElements {
    'd-button': DButton;
    'd-content': DContent;
    'd-parallax': DParallax;
    'd-section': DSection;
    'danzerpress-menu': DanzerpressMenu;
    'danzerpress-post-grid': DanzerpressPostGrid;
    'dp-slider': DpSlider;
    'my-component': MyComponent;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


